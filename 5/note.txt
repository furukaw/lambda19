cbv cbn と見てきたわけなんですけれども、これでやっとcbpvの準備ができてきた
今日からcbpvに入る
一応、スローガンっていうのをレジュメに書きましたが、
A value is a computation dows.
value ってのはもうそれだけで存在していて、もうこれ以上実行できない。
computation っていうのは答えがどうなるかっていうのを計算しないといけない
最初からこの２つを区別して定義しようという
今日の予定は、cbpvで出てくる型とtermがどういうものか、実行規則を把握する
今日は28,29（スローガンは27）,30,31ページあたりをやろうという感じ

まず 2.2 の、型がどう定義されるか
値の型
A = U B		thunk（計算を止めといて冷凍庫に入れたもの) の u ■fun () -> 1 + 2
  | Σ(i∈I) Ai	A + A（inl/inr が任意の複数に拡張された）■全部 value
  | 1		要素が１つの型（() : 1）
  | A × A	２つ組の型 ■value と value のペア
計算の型
B = F A		lift の f ■値を計算に持ち上げる感（これ以上計算するところがないという計算）
  | Π(i∈I) Bi	B1 × B2 と同じものじゃないの？（P30の上のところに色々書いてある）
  | A → B	関数型はなんか知らないけど計算の型

この全体の区分けっていうのは、どうも適当にやっているように見える（実際彼らはとても分かっているが）

じゃあ term のほうにいくわけですが
例によって型付きで宣言されていて

C っていうのがついてるのが computation
V っていうのがくっついてるのが value の方で

Γ |-c M : B
Γ |-v V : A

Γには x : A1, x2 : A2,... が入ってる
環境に入ってる型は全部 value の型
それで、それでどうするかなー
図2.1 をひたすら一通り眺めますわね
どこからいくか
まあ上から順番に行くんでもいいか
そろそろそれでもいいですかね
これは、変数の規則はまあ変数の規則がそのままある感じです
変数が出てきたらそれは必ずvalueの型を持つ

Γ, x : A, Γ' |-v x : A

こう V が value になってるっていうときはこれを computation に持ち上げることができて、
そういうときにはこう return を使う

Γ |-v V : A
---------------------
Γ |-c return V : F A

monad が分かってる人は、この return ってのは unit で持ち上げてる格好ですね
この右上に行くと、

Γ |-v V : A   Γ, x : A |-c M : B
----------------------------------
Γ |-c let V be x. M

これ　x に V を入れといて M を計算する
V が value の A 型を持っているんだったらこれ後ろの方は computation でなんでもよくて、
この変数x には A　型が入る
下に似たようなのがありますね！？
これどうして２つ作らなくちゃいけないのかわかりませんが

これmonad のことを知っているひとは右側がmonadic bind になっているわけですが、

Γ |-c M : F A   Γ, x : A |-c N : B
-----------------------------------
Γ |-c M to x. N :  B

こっち側はこの M　はまだ計算をしなくちゃいけないと言っている
M を実行した結果、 value　を持ち上げた格好をしていなかればならない
これを取り除いた A　型だと思ってよろしくて、
それでN が B 型を持つなら、B　型
あのmonadic bind の格好に似通っている
そういう格好になってる

どっかで、どっかで例を出さないといけないと思ってはいるんですが
あと他に何があるかっていうと thunk ってのがあるわけですね
thunk ってのは何するかというと
M はcomputation でよろしい
thunk のMっていうのはこれはvalue型になって
thunk っていう構文で書いてあげるとこれは今は実行しなくて、次っていう格好に
これは thunk の B 型であると

Γ |-c M : B
--------------------
Γ |-v thunk M : U B

で、thunk とついになるのがこの force ってやつで

Γ |-V : U B
Γ |-c force V : B

この V っていうのは B 型の computationを固めたような格好をしてないといけない
そういうものは force した時点でそれを溶かして実行する
thunk があの関数だとすると、それに unit を渡す感じ
一番下がわかりやすいか！こっちからいきますか
λx.M は computation　だと言っているわけですけれども、これは A -> B　型だと
これは
Γ, x : A |-c M : B
--------------------
Γ |-c λx.M : A -> B

環境に入るものは value 型だと言ってる時点で A は value の型
これ全体をどうしてcomputationにしたいかはちょっとよくわかんないですね
その方がきれいになってくのかもしれないですが

でapplicationは

Γ｜-v V : A   Γ |-c M : A -> B
Γ|-c V`M : B

まあ、関数呼び出しはまあcomputationでしょうねぇって感じですね
引数部分は必ずvalueになってなくちゃいけない
引数はVになっていてA型を持ってるっていう格好になってなくちゃいけない
M　の方は別にcomputationでよろしい
ただA->B型になっていないといけない
これ何を言っているかっていうと、引数部分はvalueになってなくちゃいけないってわけですね
えっと関数部分はvalueじゃなくてもいいです
例えば関数部分が、λx.λy.x　みたいな関数に1渡すと。
いうようなことはできて、computationが返ってくる
これにもう一個引数渡すというようなことはやってかまわない
でもこの１の部分に(1`(λx.x))とかは書けない（valueになってない）
で、確かにこれがかけちゃうと何が起きるかっていうと、cbvとcbnで挙動が変わってくる
書きたかったらどうすんのっていうと、これは書くときに1をλx.xに渡すっていう計算とどっちが先かを
明示的に描いてあげなくちゃいけない

(thunk (1`(λx.x)))`(λy.y) はOK

これはcbnの実行を模倣しているというような格好になる
cbvにしたい場合には to っていうのを使います

(a`(λx.x)) to z.z`(λy.y)

変数はvalueになっているので、こういう式は書くことができる
あ、引数部分が F A型になってないといけないか（迷）
（考えた結果）λx.x じゃなくて λx.return x と書かないといけなかった

|-c 1`(λx.return x) : F int

で、こんな感じで、その、あのー、cbv/cbn では当たり前だったところを、全体を再定式化してあげることで
どっちも書き表わせるようなものを作ってる
あでもこれやったら少し、少し分かったような気がします
残りペアと足し算ですね

足し算に行くと…んーと？

Γ|-v V : Ai
Γ|-v (i, v) : Σi∈I Ai

足し算はvalueで、
右下のiは右でbindされてる
左下のiは特定のi（特定番目のvを足し算型にindexしてる）
何番目のところに突っ込んだかっていうのを、タグにしてペアで持ってる
パターンのところで言いましたけども、どっちもこれvalueじゃないといけない
じゃあ足し算型作るときに、valueじゃないものの足し算型をどうするか
えっと、例えば、int + float 型とかで
例えばこう…左側で、ここんところに7とかかいてくれれば型つくんだけど３＋４って書かれたら
int+float型にはならなくて
じゃあこれ入れたかったらどうすんだって話ですけど
それはこれ（to）をやるわけです
こう3+4っていうのを計算しといて
(3+4) to z.(0, z)
3+4っていうのは必ず出しておかないといけない
正規形変換をやってるのとかなり近い感じがある
3+4ていうのにzを与えてあげて、足し算型の中身はvalueで済む
足し算型では、先に中身を計算するしかないって言ってますね
いやそんなことないですね
(0, thunk (3 + 4))
これで3+4を実行するような計算、固めた計算
いやthunkはU B型だから、こいつは何型かっていうと、
…U F int + float 型？

で、足し算…この右側は？パターンマッチ…これはまあ普通の感じですか

Γ |-v V : Σi∈I Ai   ... Γ, x : Ai |-c Mi : B ... i∈I
Γ |-c pm V as {..., (i, x).Mi,...} : B

意味は、Vは足し算型なので、それでパターンマッチしているということは、普通のOCamlのmatch文だと
言っていて、i番目だったらxにしてそれを使ってMiを実行する
全てのブランチがB型を持っていないといけない
で、えーーと、次の行はまだ理解できますね

Γ |-v V : A   Γ |-v V' : A'
Γ |-v (V, V') : A × A'

それぞれがvalueじゃないといけない

Γ |-v V : A × A'   Γ, x : A, y : A' |-c M : B
Γ |-c

これはまあ、Vをパターンマッチ
まあまあこの辺は、まあ書いてある通り
残り２つがちょっと面倒ですね
これはcomputationのペアになってるってことですね

... Γ |-c Mi : Bi ... i∈I
Γ |-c λ{..., i.Mi, ...} : Πi∈I Bi

computation のペアを、全部λに渡したとすると、その中のi番目がとってこられる
具体的には
λ(0.return 0, 1.return 1, 2.return 0, 3.return 1}
3番目(2)がとってきたい
これがあれば別にvalueのペアはなくていい気がするんですけど

残ってる最後のやつが、iを渡すってやつですね
数字iをMに渡す

書くのをやめました。
