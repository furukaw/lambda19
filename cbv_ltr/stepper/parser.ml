type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | QQ
  | TRUE
  | FALSE
  | LET
  | IF
  | THEN
  | ELSE
  | LAM
  | APP
  | DOT
  | ARROW
  | BAR
  | COMMA
  | BE
  | PM
  | AS
  | PRINT
  | INL
  | INR
  | VAR of (string)
  | NUM of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* 補助的な変数、関数、型などの定義 *)
# 34 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* QQ *);
  262 (* TRUE *);
  263 (* FALSE *);
  264 (* LET *);
  265 (* IF *);
  266 (* THEN *);
  267 (* ELSE *);
  268 (* LAM *);
  269 (* APP *);
  270 (* DOT *);
  271 (* ARROW *);
  272 (* BAR *);
  273 (* COMMA *);
  274 (* BE *);
  275 (* PM *);
  276 (* AS *);
  277 (* PRINT *);
  278 (* INL *);
  279 (* INR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  280 (* VAR *);
  281 (* NUM *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\003\000\001\000\006\000\006\000\002\000\
\002\000\014\000\004\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\002\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\004\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000"

let yydgoto = "\002\000\
\014\000\015\000"

let yysindex = "\011\000\
\030\255\000\000\030\255\000\000\000\000\030\255\030\255\250\254\
\030\255\004\255\030\255\030\255\000\000\019\255\000\000\000\255\
\001\255\010\255\027\255\253\254\032\255\019\255\019\255\030\255\
\000\000\009\255\030\255\030\255\041\255\030\255\000\000\034\255\
\017\255\019\255\028\255\019\255\030\255\030\255\031\255\019\255\
\019\255\042\255\030\255\254\254\035\255\033\255\045\255\030\255\
\003\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\026\000\000\000\000\000\000\000\043\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\253\255\000\000"

let yytablesize = 323
let yytable = "\016\000\
\008\000\025\000\017\000\018\000\009\000\020\000\050\000\022\000\
\023\000\024\000\024\000\001\000\024\000\024\000\045\000\024\000\
\029\000\019\000\026\000\027\000\031\000\011\000\024\000\033\000\
\034\000\013\000\036\000\038\000\021\000\024\000\003\000\024\000\
\032\000\040\000\041\000\004\000\005\000\006\000\007\000\044\000\
\028\000\008\000\006\000\035\000\049\000\030\000\007\000\037\000\
\009\000\039\000\010\000\011\000\012\000\013\000\042\000\043\000\
\047\000\046\000\048\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\008\000\000\000\008\000\000\000\009\000\000\000\
\009\000\000\000\008\000\008\000\000\000\000\000\009\000\009\000\
\000\000\008\000\008\000\000\000\008\000\009\000\009\000\011\000\
\009\000\011\000\000\000\013\000\000\000\013\000\000\000\011\000\
\011\000\000\000\000\000\013\000\013\000\000\000\011\000\011\000\
\000\000\011\000\013\000\013\000\006\000\013\000\006\000\000\000\
\007\000\000\000\007\000\000\000\006\000\006\000\000\000\000\000\
\007\000\007\000\000\000\006\000\006\000\000\000\006\000\007\000\
\007\000\000\000\007\000"

let yycheck = "\003\000\
\000\000\002\001\006\000\007\000\000\000\009\000\004\001\011\000\
\012\000\013\001\013\001\001\000\013\001\013\001\017\001\013\001\
\020\001\024\001\018\001\010\001\024\000\000\000\013\001\027\000\
\028\000\000\000\030\000\011\001\025\001\013\001\001\001\013\001\
\024\001\037\000\038\000\006\001\007\001\008\001\009\001\043\000\
\014\001\012\001\000\000\003\001\048\000\014\001\000\000\014\001\
\019\001\022\001\021\001\022\001\023\001\024\001\024\001\014\001\
\024\001\023\001\014\001\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\255\255\004\001\255\255\002\001\255\255\
\004\001\255\255\010\001\011\001\255\255\255\255\010\001\011\001\
\255\255\017\001\018\001\255\255\020\001\017\001\018\001\002\001\
\020\001\004\001\255\255\002\001\255\255\004\001\255\255\010\001\
\011\001\255\255\255\255\010\001\011\001\255\255\017\001\018\001\
\255\255\020\001\017\001\018\001\002\001\020\001\004\001\255\255\
\002\001\255\255\004\001\255\255\010\001\011\001\255\255\255\255\
\010\001\011\001\255\255\017\001\018\001\255\255\020\001\017\001\
\018\001\255\255\020\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  QQ\000\
  TRUE\000\
  FALSE\000\
  LET\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LAM\000\
  APP\000\
  DOT\000\
  ARROW\000\
  BAR\000\
  COMMA\000\
  BE\000\
  PM\000\
  AS\000\
  PRINT\000\
  INL\000\
  INR\000\
  EOF\000\
  "

let yynames_block = "\
  VAR\000\
  NUM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "parser.mly"
        ( Syntax.Var (_1) )
# 234 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parser.mly"
 ( Syntax.True )
# 240 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
 ( Syntax.False )
# 246 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 43 "parser.mly"
 ( _2 )
# 253 "parser.ml"
               : 'simple_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_expr) in
    Obj.repr(
# 47 "parser.mly"
 ( _1 )
# 260 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 49 "parser.mly"
        ( Syntax.Let (_2, _4, _6) )
# 269 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 51 "parser.mly"
        ( Syntax.If (_2, _4, _6) )
# 278 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 53 "parser.mly"
        ( Syntax.Inl (_2) )
# 285 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 55 "parser.mly"
        ( Syntax.Inr (_2) )
# 292 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : Syntax.t) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 57 "parser.mly"
        ( Syntax.Pm (_2, _6, _8, _11, _13) )
# 303 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 59 "parser.mly"
        ( Syntax.Lam (_2, _4) )
# 311 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 61 "parser.mly"
        ( Syntax.App (_1, _3) )
# 319 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 63 "parser.mly"
        ( Syntax.Print (_2, _4) )
# 327 "parser.ml"
               : Syntax.t))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
